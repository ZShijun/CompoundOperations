
%header%

GRAMMARTYPE = "LL"

DESCRIPTION = "该文件按照LL(1)文法定义公式计算的语法规则，这意味最好使用递归下降解析器来
               读取它，另外，使用grammatica-1.6.jar可自动生成ExpressionAnalyzer.cs，
               ExpressionConstants.cs，ExpressionParser.cs，ExpressionTokenizer.cs
               请勿手动编辑。"

AUTHOR      = "zhushijun"
VERSION     = "1.0"
DATE        = "2021年2月9日"

/** Token definitions **/
%tokens%

ADD                          = "+"
SUB                          = "-"
MUL                          = "*"
DIV                          = "/"
POWER                        = "^"
MOD                          = "%"

LEFT_PAREN                   = "("
RIGHT_PAREN                  = ")"
LEFT_BRACE                   = "["
RIGHT_BRACE                  = "]"

EQ                           = "="
NE                           = "<>"
LT                           = "<"
GT                           = ">"
LE                           = "<="
GE                           = ">="

AND                          = <<AND|and>>
OR                           = <<OR|or>>
XOR                          = <<XOR|xor>>
NOT                          = <<NOT|not>>

IN                           = <<IN|in>>
DOT                          = "."

COMMA                        = ","
WHITESPACE                   = <<\s+>> %ignore%

INTEGER                      = <<\d+>>
HEX                          = <<0[Xx][0-9a-f]+>>
REAL                         = <<\d+\.\d+([Ee][+-]?\d+)?>>
STRING                       = <<"([^"\r\n\\]|\\u[0-9a-f]{4}|\\[\\"'trn])*">>
CHAR                         = <<'([^'\r\n\\]|\\u[0-9a-f]{4}|\\[\\"'trn])'>>
TRUE                         = <<[Tt]rue>>
FALSE                        = <<[Ff]alse>>
NULL                         = <<[Nn]ull>>
DATETIME                     = <<#[^#]+#>>

// Special Functions
IF                           = <<IF|if>>
IFS                          = <<IFS|ifs>>
DATE                         = <<DATE|date>>

// 放在最底部，否则会与前面的定义冲突，例如会匹配到true、false等
IDENTIFIER                   = <<[a-zA-Z_]\w*>>
/** Production definitions **/
%productions%
/**
Expression                   = LogicalExpression [ExpressionRest] ;
ExpressionRest               = LogicalOperator Expression ;

LogicalExpression            = CompareExpression [LogicalExpressionRest] ;
LogicalExpressionRest        = CompareOperator LogicalExpression ;

ComparisonExpression            = AdditiveExpression [CompareExpressionRest];
CompareExpressionRest        = MultiplicativeOperator CompareExpression ;

AdditiveExpression           = MultiplicativeExpression [AdditiveExpressionRest] ;
AdditiveExpressionRest       = AdditiveOperator AdditiveExpression ;

MultiplicativeExpression     = ExpressionFactor [MultiplicativeExpressionRest];
MultiplicativeExpressionRest = MultiplicativeOperator MultiplicativeExpression;

IfExpression                 = IF "(" Expression "," Expression "," Expression ")" ;
IfsExpression                = IFS "(" Expression "," Expression "," Expression ")" ;
DateExpression               = DATE "(" Expression "," Expression "," Expression ")" ;

ArgumentListExpression       = Expression { "," Expression } ;

// 加法运算
AdditiveOperator             = ADD 
                             | SUB ; 

// 乘法运算
MultiplicativeOperator       = MUL
                             | DIV 
                             | MOD ; 

// 比较运算
ComparisonOperator           = EQ 
                             | NE 
                             | LT 
                             | GT 
                             | LE
                             | GE ;

// 逻辑运算
LogicalOperator              = AND
                             | OR
                             | XOR ;


ExpressionFactor             = ExpressionAtom
                             | LogicalAtom
                             | "(" Expression ")" ;
// 表达式原子数据
Atom                         = INTEGER
                             | HEX
                             | REAL
                             | STRING
                             | CHAR
                             | NULL
                             | DATETIME
                             | TRUE
                             | FALSE
                             | IDENTIFIER ;
**/

Expression                   = LogicalExpression;

LogicalExpression            = BooleanExpression [LogicalOperator LogicalExpression];

BooleanExpression            = ComparisonExpression
                             | NOT BooleanExpression;

ComparisonExpression         = AdditiveExpression [ComparisonOperator ComparisonExpression];
AdditiveExpression           = MultiplicativeExpression [AdditiveOperator AdditiveExpression];
MultiplicativeExpression     = NegativeExpression [MultiplicativeOperator MultiplicativeExpression];
NegativeExpression           = "-"? PowerExpression;
PowerExpression              = Factor ["^" PowerExpression];

// 加法运算
AdditiveOperator             = ADD 
                             | SUB ; 

// 乘法运算
MultiplicativeOperator       = MUL
                             | DIV 
                             | MOD ; 

// 比较运算
ComparisonOperator           = EQ 
                             | NE 
                             | LT 
                             | GT 
                             | LE
                             | GE ;

// 逻辑运算
LogicalOperator              = AND
                             | OR
                             | XOR ;

Factor                       = Atom
                             | "(" Expression ")" ;

Atom                         = INTEGER
                             | HEX
                             | REAL
                             | STRING
                             | CHAR
                             | NULL
                             | DATETIME
                             | TRUE
                             | FALSE
                             | IDENTIFIER ;

